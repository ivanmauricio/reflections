How did viewing a diff between two versions of a file help you see the bug that was introduced?

diff compared the characters from two different but very similar files. one that worked before changes were made
and the one after the changes which had some bugs. this meant that while making the changes a mistake was made
and diff helped me to see where this mistake was. by comparing the files and knowing which lines were different
it was easy to spot the typo and quickly correct it.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

while i havent been programming for very long i have seen that making tiny little mistakes when making changes
to a code can lead to a lot of bother if you make a mistake and only realise way down the road. i have already
encountered this, i had to press undo lots of times to try to pinpoint where i had made a mistake. this is
obviously not the most efficient use of my time and it would be better if older versions were readily available
and if you could compare between versions easily.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

the pros of manually saving your commits is that you can choose significant points as to when commit and label
these points with the changes that you have made. saving automatically would create commits at random times which
would probably not be too helpful. the cons are that you might forget to save, take too long or save too often.
however i think knowing to commit and when to do it is a skill that you can get better at with practice and after
a while these drawbacks won't be as relevant.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Git was made especially for code and this means that it is more useful if different files are tracked together.
This is because the code from on file might affect the code on another file and if the changes are not commited
together then it might be hard to debug as you will not know from which document the bug is coming from. with
multiple files commits you can see what files were changed since the last commit and so isolate where the bug
is coming from.

How can you use the commands git log and git diff to view the history of files?

git log lists the commits that have been made along with their authors, a brief description and the date on which
they were saved. when you have this list you can compare two commits by using git diff and using the commit
numbers which were provided when you ran git log. git diff will show the difference in the files, with extractions
and additions both listed.

How might using version control make you more confident to make changes that could break something?

with version control it is easier to experiment with the code and try things out as you always know that you
can come back to a previous fully working version of your programme or website. this would be really handy and
would save a lot of stress if things went really wrong and you had no idea why.

Now that you have your workspace set up, what do you want to try using Git for?

I would like to use git to carry on my fron end web development course. i am actually quite looking forward to
beginning the javascript module, especially with all that i have learnt about git as i think it will make things
a lot easier. all this learning is also making me feel very clever which i am enjoying a lot!

